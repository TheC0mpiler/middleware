# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `meta-server.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MetaServer
_M_MetaServer = Ice.openModule('MetaServer')
__name__ = 'MetaServer'

if 'Song' not in _M_MetaServer.__dict__:
    _M_MetaServer.Song = Ice.createTempClass()
    class Song(object):
        def __init__(self, name='', author='', album='', path=''):
            self.name = name
            self.author = author
            self.album = album
            self.path = path

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.author)
            _h = 5 * _h + Ice.getHash(self.album)
            _h = 5 * _h + Ice.getHash(self.path)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_MetaServer.Song):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.author is None or other.author is None:
                    if self.author != other.author:
                        return (-1 if self.author is None else 1)
                else:
                    if self.author < other.author:
                        return -1
                    elif self.author > other.author:
                        return 1
                if self.album is None or other.album is None:
                    if self.album != other.album:
                        return (-1 if self.album is None else 1)
                else:
                    if self.album < other.album:
                        return -1
                    elif self.album > other.album:
                        return 1
                if self.path is None or other.path is None:
                    if self.path != other.path:
                        return (-1 if self.path is None else 1)
                else:
                    if self.path < other.path:
                        return -1
                    elif self.path > other.path:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_MetaServer._t_Song)

        __repr__ = __str__

    _M_MetaServer._t_Song = IcePy.defineStruct('::MetaServer::Song', Song, (), (
        ('name', (), IcePy._t_string),
        ('author', (), IcePy._t_string),
        ('album', (), IcePy._t_string),
        ('path', (), IcePy._t_string)
    ))

    _M_MetaServer.Song = Song
    del Song

if '_t_SongSeq' not in _M_MetaServer.__dict__:
    _M_MetaServer._t_SongSeq = IcePy.defineSequence('::MetaServer::SongSeq', (), _M_MetaServer._t_Song)

_M_MetaServer._t_IMetaServer = IcePy.defineValue('::MetaServer::IMetaServer', Ice.Value, -1, (), False, True, None, ())

if 'IMetaServerPrx' not in _M_MetaServer.__dict__:
    _M_MetaServer.IMetaServerPrx = Ice.createTempClass()
    class IMetaServerPrx(Ice.ObjectPrx):

        def searchMusic(self, name, author, album, context=None):
            return _M_MetaServer.IMetaServer._op_searchMusic.invoke(self, ((name, author, album), context))

        def searchMusicAsync(self, name, author, album, context=None):
            return _M_MetaServer.IMetaServer._op_searchMusic.invokeAsync(self, ((name, author, album), context))

        def begin_searchMusic(self, name, author, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_MetaServer.IMetaServer._op_searchMusic.begin(self, ((name, author, album), _response, _ex, _sent, context))

        def end_searchMusic(self, _r):
            return _M_MetaServer.IMetaServer._op_searchMusic.end(self, _r)

        def connectToMe(self, port, context=None):
            return _M_MetaServer.IMetaServer._op_connectToMe.invoke(self, ((port, ), context))

        def connectToMeAsync(self, port, context=None):
            return _M_MetaServer.IMetaServer._op_connectToMe.invokeAsync(self, ((port, ), context))

        def begin_connectToMe(self, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_MetaServer.IMetaServer._op_connectToMe.begin(self, ((port, ), _response, _ex, _sent, context))

        def end_connectToMe(self, _r):
            return _M_MetaServer.IMetaServer._op_connectToMe.end(self, _r)

        def deconnectMe(self, port, context=None):
            return _M_MetaServer.IMetaServer._op_deconnectMe.invoke(self, ((port, ), context))

        def deconnectMeAsync(self, port, context=None):
            return _M_MetaServer.IMetaServer._op_deconnectMe.invokeAsync(self, ((port, ), context))

        def begin_deconnectMe(self, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_MetaServer.IMetaServer._op_deconnectMe.begin(self, ((port, ), _response, _ex, _sent, context))

        def end_deconnectMe(self, _r):
            return _M_MetaServer.IMetaServer._op_deconnectMe.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MetaServer.IMetaServerPrx.ice_checkedCast(proxy, '::MetaServer::IMetaServer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MetaServer.IMetaServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MetaServer::IMetaServer'
    _M_MetaServer._t_IMetaServerPrx = IcePy.defineProxy('::MetaServer::IMetaServer', IMetaServerPrx)

    _M_MetaServer.IMetaServerPrx = IMetaServerPrx
    del IMetaServerPrx

    _M_MetaServer.IMetaServer = Ice.createTempClass()
    class IMetaServer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MetaServer::IMetaServer')

        def ice_id(self, current=None):
            return '::MetaServer::IMetaServer'

        @staticmethod
        def ice_staticId():
            return '::MetaServer::IMetaServer'

        def searchMusic(self, name, author, album, current=None):
            raise NotImplementedError("servant method 'searchMusic' not implemented")

        def connectToMe(self, port, current=None):
            raise NotImplementedError("servant method 'connectToMe' not implemented")

        def deconnectMe(self, port, current=None):
            raise NotImplementedError("servant method 'deconnectMe' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MetaServer._t_IMetaServerDisp)

        __repr__ = __str__

    _M_MetaServer._t_IMetaServerDisp = IcePy.defineClass('::MetaServer::IMetaServer', IMetaServer, (), None, ())
    IMetaServer._ice_type = _M_MetaServer._t_IMetaServerDisp

    IMetaServer._op_searchMusic = IcePy.Operation('searchMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_MetaServer._t_SongSeq, False, 0), ())
    IMetaServer._op_connectToMe = IcePy.Operation('connectToMe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    IMetaServer._op_deconnectMe = IcePy.Operation('deconnectMe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_MetaServer.IMetaServer = IMetaServer
    del IMetaServer

# End of module MetaServer
